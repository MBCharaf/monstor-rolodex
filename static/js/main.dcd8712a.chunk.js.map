{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/search-box/search-box.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monstores","map","SearchBox","placeholder","handelChange","type","onChange","App","e","setState","searchInput","target","value","state","monsters","fetch","then","res","json","users","this","filteredMonstres","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAACC,GACjB,OAAO,sBAAKC,UAAU,iBAAf,UACH,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BACKL,EAAMI,QAAQE,OAGnB,4BAAIN,EAAMI,QAAQG,YCNbC,EAAW,SAACR,GACvB,OAAS,qBAAKC,UAAU,YAAf,SACPD,EAAMS,UAAUC,KAAI,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAMA,QAASA,GAAcA,EAAQC,UCF3DM,G,MAAY,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,aAExC,OAAO,uBACCZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC4BHG,E,kDAjCb,aAAc,IAAD,8BACX,gBAcFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAdrC,EAAKC,MAAQ,CACXC,SAAU,GACVJ,YAAY,IAJH,E,qDASb,WAAsB,IAAD,OACnBK,MAAM,8CACLC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACK,SAASK,S,oBAMzC,WAEE,MAAgCC,KAAKP,MAA7BC,EAAR,EAAQA,SAASJ,EAAjB,EAAiBA,YACXW,EAAmBP,EAASQ,QAAO,SAAA3B,GAAO,OAAIA,EAAQE,KAAK0B,cAAcC,SAASd,EAAYa,kBACpG,OAEA,sBAAK/B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWW,YAAY,iBAAiBC,aAAcgB,KAAKhB,eAC3D,cAAC,EAAD,CAAUJ,UAAWqB,W,GA5BRI,aCQJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.dcd8712a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.css\";\n\nexport const Card = (props) =>{\n    return <div className=\"card-container\">\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\n        <h2 >\n            {props.monster.name}\n\n        </h2>\n        <p>{props.monster.email}</p>\n    </div>\n}","import React from \"react\";\nimport \"./card-list.css\";\nimport {Card} from \"../card/card\";\n\nexport const CardList = (props) =>{\n  return   <div className=\"card-list\">{\n    props.monstores.map(monster => <Card monster={monster} key={monster.id}></Card>)\n  }</div>;\n}","import React from \"react\";\nimport \"./search-box.css\";\n\n\nexport const SearchBox = ({placeholder, handelChange}) =>{\n    \nreturn <input\n        className=\"search\"\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={handelChange}\n        >\n        </input>\n}","import './App.css';\nimport { Component } from 'react';\nimport {CardList} from \"./components/card-list/card-list\";\nimport {SearchBox} from \"./components/search-box/search-box\";\nclass  App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchInput:\"\"\n    };\n    // using arrow functions we dont need to bind the function to the class any more because the arrow function autmaticly bind to the place where it was called at the first place\n    // this.handelChange = this.handelChange.bind(this);\n  }\n  componentDidMount () {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then( res => res.json())\n    .then(users => this.setState({monsters:users}))\n\n  };\n  handelChange = e => {\n    this.setState({searchInput: e.target.value});\n  };\n  render (){\n    //destructuring\n    const  {monsters,searchInput} = this.state;\n    const filteredMonstres = monsters.filter(monster => monster.name.toLowerCase().includes(searchInput.toLowerCase()));\n    return (\n      \n    <div className=\"App\">\n      <h1>Monster Rolodex</h1>\n      <SearchBox placeholder=\"find a monster\" handelChange={this.handelChange}></SearchBox>\n      <CardList monstores={filteredMonstres}></CardList>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}